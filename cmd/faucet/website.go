// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (11.271kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x7b\x93\xdb\x36\x92\xff\x7b\xfc\x29\x3a\x3c\x7b\x25\x9d\x87\xa4\x66\xc6\xf6\xfa\x24\x52\x29\xaf\x37\xbb\xe7\xab\xbb\x24\x95\x38\x75\xb7\x95\x4d\x5d\x81\x64\x4b\x84\x07\x04\x18\x00\x94\x46\x99\xd2\x77\xbf\x6a\x80\xa4\xa8\xc7\x4c\xec\xb5\xaf\x6a\xfd\xc7\x98\xc4\xa3\xbb\xd1\xfd\x6b\xf4\x83\x4a\xbe\xfa\xf3\x77\x6f\xdf\xff\xed\xfb\x6f\xa0\xb4\x95\x58\x3c\x49\xe8\x3f\x10\x4c\xae\xd2\x00\x65\xb0\x78\x72\x91\x94\xc8\x8a\xc5\x93\x8b\x8b\xa4\x42\xcb\x20\x2f\x99\x36\x68\xd3\xa0\xb1\xcb\xf0\x75\xb0\x9f\x28\xad\xad\x43\xfc\xb5\xe1\xeb\x34\xf8\x9f\xf0\xa7\x37\xe1\x5b\x55\xd5\xcc\xf2\x4c\x60\x00\xb9\x92\x16\xa5\x4d\x83\x77\xdf\xa4\x58\xac\x70\xb0\x4f\xb2\x0a\xd3\x60\xcd\x71\x53\x2b\x6d\x07\x4b\x37\xbc\xb0\x65\x5a\xe0\x9a\xe7\x18\xba\x97\x4b\xe0\x92\x5b\xce\x44\x68\x72\x26\x30\xbd\x0a\x16\x4f\x88\x8e\xe5\x56\xe0\xe2\xfe\x3e\xfa\x16\xed\x46\xe9\xdb\xdd\x6e\x06\x6f\x1a\x5b\xa2\xb4\x3c\x67\x16\x0b\xf8\x0b\x6b\x72\xb4\x49\xec\x57\xba\x4d\x82\xcb\x5b\x28\x35\x2e\xd3\x80\x44\x37\xb3\x38\xce\x0b\xf9\xc1\x44\xb9\x50\x4d\xb1\x14\x4c\x63\x94\xab\x2a\x66\x1f\xd8\x5d\x2c\x78\x66\x62\xbb\xe1\xd6\xa2\x0e\x33\xa5\xac\xb1\x9a\xd5\xf1\x4d\x74\x13\xfd\x31\xce\x8d\x89\xfb\xb1\xa8\xe2\x32\xca\x8d\x09\x40\xa3\x48\x03\x63\xb7\x02\x4d\x89\x68\x03\x88\x17\xff\x18\xdf\xa5\x92\x36\x64\x1b\x34\xaa\xc2\xf8\x45\xf4\xc7\x68\xea\x58\x0e\x87\x1f\xe7\x4a\x6c\x4d\xae\x79\x6d\xc1\xe8\xfc\xa3\xf9\x7e\xf8\xb5\x41\xbd\x8d\x6f\xa2\xab\xe8\xaa\x7d\x71\x7c\x3e\x98\x60\x91\xc4\x9e\xe0\xe2\xb3\x68\x87\x52\xd9\x6d\x7c\x1d\xbd\x88\xae\xe2\x9a\xe5\xb7\x6c\x85\x45\xc7\x89\xa6\xa2\x6e\xf0\x8b\xf1\x7d\xc8\x86\x1f\x8e\x4d\xf8\x25\x98\x55\xaa\x42\x69\xa3\x0f\x26\xbe\x8e\xae\x5e\x47\xd3\x6e\xe0\x94\xbe\x63\x40\x46\x23\x56\x17\xd1\x1a\x35\x21\x57\x84\x39\x4a\x8b\x1a\xee\x69\xf4\xa2\xe2\x32\x2c\x91\xaf\x4a\x3b\x83\xab\xe9\xf4\xd9\xfc\xdc\xe8\xba\xf4\xc3\x05\x37\xb5\x60\xdb\x19\x2c\x05\xde\xf9\x21\x26\xf8\x4a\x86\xdc\x62\x65\x66\xe0\x29\xbb\x89\x9d\xe3\x59\x6b\xb5\xd2\x68\x4c\xcb\xac\x56\x86\x5b\xae\xe4\x8c\x10\xc5\x2c\x5f\xe3\xb9\xb5\xa6\x66\xf2\x64\x03\xcb\x8c\x12\x8d\xc5\x23\x41\x32\xa1\xf2\x5b\x3f\xe6\xbc\x79\x78\x88\x5c\x09\xa5\x67\xb0\x29\x79\xbb\x0d\x1c\x23\xa8\x35\xb6\xe4\xa1\x66\x45\xc1\xe5\x6a\x06\xaf\xea\xf6\x3c\x50\x31\xbd\xe2\x72\x06\xd3\xfd\x96\x24\xee\xd4\x98\xc4\xfe\xe2\x7a\x72\x91\x64\xaa\xd8\x3a\x1b\x16\x7c\x0d\xb9\x60\xc6\xa4\xc1\x91\x8a\xdd\x85\x74\xb0\x80\xee\x21\xc6\x65\x37\x75\x30\xa7\xd5\x26\x00\xc7\x28\x0d\xbc\x10\x61\xa6\xac\x55\xd5\x0c\xae\x48\xbc\x76\xcb\x11\x3d\x11\x8a\x55\x78\x75\xdd\x4d\x5e\x24\xe5\x55\x47\xc4\xe2\x9d\x0d\x9d\x7d\x7a\xcb\x04\x8b\x84\x77\x7b\x97\x0c\x96\x2c\xcc\x98\x2d\x03\x60\x9a\xb3\xb0\xe4\x45\x81\x32\x0d\xac\x6e\x90\x70\xc4\x17\x30\xbc\xfe\x1e\xb8\xfd\xca\xab\x4e\xae\xb8\xe0\xeb\xf6\x58\x83\xc7\xa3\x13\x3e\x7c\x88\xd7\xd0\x3e\xa8\xe5\xd2\xa0\x0d\x07\x67\x1a\x2c\xe6\xb2\x6e\x6c\xb8\xd2\xaa\xa9\xfb\xf9\x8b\xc4\x8d\x02\x2f\xd2\xa0\xd1\x22\x68\xaf\x7f\xf7\x68\xb7\x75\xab\x8a\xa0\x3f\xb8\xd2\x55\x48\x96\xd0\x4a\x04\x50\x0b\x96\x63\xa9\x44\x81\x3a\x0d\x7e\x54\x39\x67\x02\xa4\x3f\x33\xfc\xf4\xc3\x7f\x42\x6b\x32\x2e\x57\xb0\x55\x8d\x86\x6f\x6c\x89\x1a\x9b\x0a\x58\x51\x10\x5c\xa3\x28\x0a\xe2\xbd\x24\x0e\xbc\xa7\xb2\x86\x99\x95\x7b\x79\x2f\x92\xac\xb1\x56\xf5\x0b\x33\x2b\x21\xb3\x32\x2c\x70\xc9\x1a\x61\xa1\xd0\xaa\x2e\xd4\x46\x86\x56\xad\x56\x14\xea\xfc\x29\xfc\xa6\x00\x0a\x66\x59\x3b\x95\x06\xdd\xda\xce\x88\xcc\xd4\xaa\x6e\xea\xd6\x8c\x7e\x10\xef\x6a\x26\x0b\x2c\xc8\xe8\xc2\x60\xb0\xf8\x2b\x5f\x23\x54\xe8\x0f\x73\x71\x8c\x89\x9c\x69\xb4\xe1\x90\xe8\x09\x32\x92\xd8\x0b\xe3\x8f\x04\xed\xbf\xa4\x11\x1d\xa5\xfe\x08\x15\xca\x06\x0e\xde\x42\x4d\x17\x4b\xb0\xb8\xbf\xd7\x4c\xae\x10\x9e\xf2\xe2\xee\x12\x9e\xb2\x4a\x35\xd2\xc2\x2c\x85\xe8\x8d\x7b\x34\xbb\xdd\x01\x75\x80\x44\xf0\x45\xc2\x1e\xc3\x37\x28\x99\x0b\x9e\xdf\xa6\x81\xe5\xa8\xd3\xfb\x7b\x22\xbe\xdb\xcd\xe1\xfe\x9e\x2f\xe1\x69\xf4\x03\xe6\xac\xb6\x79\xc9\x76\xbb\x95\xee\x9e\x23\xbc\xc3\xbc\xb1\x38\x9e\xdc\xdf\xa3\x30\xb8\xdb\x99\x26\xab\xb8\x1d\x77\xdb\x69\x5c\x16\xbb\x1d\xc9\xdc\xca\xb9\xdb\x41\x4c\x44\x65\x81\x77\xf0\x34\xfa\x1e\x35\x57\x85\x01\xbf\x3e\x89\xd9\x22\x89\x05\x5f\xb4\xfb\x0e\x95\x14\x37\x62\x8f\x97\x98\x00\xd3\x03\xdd\xf9\x8d\x13\x75\x28\xe9\x19\x37\x58\x85\xbd\xf4\x2d\x1e\x0c\xb7\x78\x8b\xdb\x34\xb8\xbf\x1f\xee\x6d\x67\x73\x26\x44\xc6\x48\x2f\xfe\x68\xfd\xa6\xdf\x90\x70\xba\xe6\xc6\xe5\x54\x8b\x4e\x82\xbd\xd8\x1f\xe9\xd7\x47\x37\x97\x55\xf5\x0c\x6e\xae\x07\xd7\xd6\x39\x97\x7f\x75\xe4\xf2\x37\x67\x17\xd7\x4c\xa2\x00\xf7\x37\x34\x15\x13\xdd\x73\xeb\x2d\x83\x6b\xe0\x78\x53\x48\x97\x74\x2f\x5a\x7f\xd9\x4f\xe7\xa0\xd6\xa8\x97\x42\x6d\x66\xc0\x1a\xab\xe6\x50\xb1\xbb\x3e\xe0\xdd\x4c\xa7\x43\xb9\x29\x17\x64\x99\x40\x77\xbd\x68\xfc\xb5\x41\x63\x4d\x7f\x99\xf8\x29\xf7\x97\xee\x94\x02\xa5\xc1\xe2\x48\x1b\xc4\x91\x54\xeb\x56\x0d\x4c\xdf\x2b\xf3\xac\xec\x4b\xa5\xfa\x18\x32\x14\xa3\x25\x3d\x08\x77\xc1\x22\xb1\x7a\xbf\xee\x22\xb1\xc5\x27\xc5\x00\x4d\x39\xde\x43\x21\xc0\xdf\x68\x74\xf6\x1a\x51\xfb\x04\x83\x20\x0b\xee\x35\x89\x6d\xf1\x19\x9c\x09\x84\x19\x33\xf8\x31\xec\x5d\xa8\xdf\xb3\x77\xaf\x9f\xcb\xbf\x44\xa6\x6d\x86\xcc\x7e\x8c\x00\xcb\x46\x16\x83\xf3\xbb\xbb\xf3\x73\x05\x68\x24\x5f\xa3\x36\xdc\x6e\x3f\x56\x02\x2c\xf6\x22\xf8\xf7\x43\x11\x92\xd8\xea\xc7\xb1\x36\x7c\xf9\x42\xce\xfd\x7b\x39\xc9\xcd\xe2\xdf\xd5\x06\x0a\x85\x06\x6c\xc9\x0d\x50\x74\xfd\x3a\x89\xcb\x9b\x7e\x49\xbd\x78\x4f\x13\x4e\xa9\xb0\x74\xb9\x05\x70\x03\xba\x91\x2e\xf4\x2a\x09\xb6\xc4\xc3\x7c\xa4\x8d\xd2\x11\xbc\x57\x94\xd3\xad\x51\x5a\xa8\x98\xe0\x39\x57\x8d\x01\x96\x5b\xa5\x0d\x2c\xb5\xaa\x00\xef\x4a\xd6\x18\x4b\x84\xe8\xfa\x60\x6b\xc6\x85\xf3\x25\x67\x52\x50\x1a\x58\x9e\x37\x55\x43\x39\xa9\x5c\x01\x4a\xd5\xac\xca\x56\x16\xab\xc0\x07\x26\xa1\xe4\xaa\x97\xc7\xd4\xac\x02\x66\x2d\xcb\x6f\xcd\x25\x74\xb7\x02\x30\x8d\x60\x39\x16\xb4\x2b\x57\x55\xa5\x24\xdc\xe8\x02\x6a\xa6\xed\x16\xcc\x61\x72\xc1\xf2\xdc\x45\xb9\x08\xde\xc8\xad\x92\x08\x25\x5b\x3b\x09\xe1\xbd\xaf\x27\x48\xae\xbf\xb0\x1c\x33\xa5\xfa\xd5\x50\xb1\x6d\xc7\xae\x95\x7e\xc3\x6d\xc9\xbd\x7a\x6a\xd4\x15\x6d\x2d\x40\xf0\x8a\x5b\x13\x25\x71\xbd\xbf\x51\xf7\xb1\x59\x84\xa5\xd2\xfc\x37\xca\x6c\xc4\xf0\xfa\xb4\x47\x97\x4b\x77\x37\x3a\xab\x0b\x5c\xda\x19\xbc\xf0\x77\xe3\x31\x8e\xdb\x12\xe8\x1c\x88\x3b\x9a\xae\xb4\xa4\x80\x33\x83\x1b\x9f\xcf\xfa\x44\xa2\xb0\x03\x09\x8a\x23\xa8\x79\xa6\xaf\x5f\xd7\x77\xbd\x1c\x7d\x52\x3c\xed\x89\x10\x02\x0e\x95\xb2\xe6\xbd\x1a\x2f\xa1\x62\xb7\x08\x0c\x12\x76\x54\x22\xb7\x42\xbb\x02\x8b\xbb\x06\x41\x6c\x37\x88\xf6\x6b\x72\xdd\xf4\x07\x4f\x90\xcb\xd5\xb3\xeb\xa9\x47\x24\x3d\x10\xf9\x67\xd7\x53\x2e\xad\x7a\x76\x3d\x9d\xde\x4d\x3f\xf2\xdf\xb3\xeb\xa9\x92\xcf\xae\xa7\xb6\xc4\x67\xd7\xd3\x67\xd7\x37\x43\x2c\xfb\x91\x2e\xb5\xa4\x55\x68\x88\x5b\x07\xf1\x00\x2c\xd3\x2b\xb4\x69\xf0\xbf\x2c\x53\x8d\x9d\x65\x82\xc9\xdb\x60\xe1\xc4\xa5\x6c\xc3\xa1\xe0\x7c\x82\x0a\x35\x33\x04\x09\x92\xd8\xa1\xa4\x6d\x86\x18\x18\x9b\x46\x6b\xd5\x48\x8a\x8a\x40\x67\x76\x1e\x2a\x47\x84\x32\x52\xcc\x24\x4a\x32\x1d\x2f\xde\xaa\x7a\x1b\x3a\x22\x6e\xfb\x89\x1a\x4d\x53\xd7\x4a\xdb\x68\xa8\x4e\x46\x85\x90\x40\x13\xbf\x9e\xbe\x7c\xfd\xea\x51\xf1\x0d\xa5\xd9\xee\x0c\xbd\x84\x2c\x53\x6b\x04\x9f\xd4\x67\xea\x0e\x98\x2c\x60\xc9\x35\x02\xdb\xb0\xed\x57\x49\x5c\xb8\x12\xec\xf3\x51\xbb\x6c\xbd\xeb\x9f\x0a\xb6\x9d\xcb\x5f\x42\xdd\x64\x82\x9b\x12\x18\x48\xdc\x40\x62\xac\x56\x72\xb5\x70\xa3\x39\xd5\xa4\xee\x15\x6a\x65\xec\x63\xe6\xc7\x2a\xc3\xa2\x38\x03\x80\x2f\x65\xff\xcd\x66\x13\x75\x9a\x74\xc6\x2f\x51\xd4\x31\x5d\x7f\x8d\xe4\x76\x1b\x7b\x37\x52\x32\xfe\x9a\x17\xe9\xf5\xeb\xeb\x57\xaf\xae\x5f\xfc\xdb\xeb\x97\x2f\xaf\x5f\xbf\x78\xf9\x10\x32\xe8\x50\x9f\x09\x0c\x9f\x46\x7f\xab\xa8\x6c\xed\x73\x68\x8f\x97\x2e\x77\xa3\x08\x5d\x50\x0d\xa2\x83\x7f\x18\x43\x8d\xa4\x44\x24\x64\xe2\x6c\x0e\xf1\x09\x28\x72\x30\x7a\x44\xb2\xcf\x84\x56\x07\x1f\x42\x8a\x6a\x2c\x9d\xb0\xab\xe6\xb9\x92\x3d\x9c\x2e\xc1\xf0\xaa\x16\x5b\xc8\xf7\x56\x3f\x8f\xab\x07\x8d\xf2\xbb\xb0\x3a\x34\x9b\x07\x99\x8b\xfe\x95\x2a\x90\xa2\xbe\x69\x4c\x8e\xb5\x6b\xf3\x52\x24\xfd\xd3\xf6\x37\x26\x2d\x97\xd8\x45\xdc\x08\xbe\x93\x62\x0b\x8d\x41\x58\x2a\x0d\x05\x66\xcd\x6a\xe5\xd2\x04\x0d\xb5\xe6\x6b\x66\xb1\x0b\xb3\xa6\x45\x45\x0f\x8a\x41\x65\x43\x29\x8f\x18\x64\x20\x7f\x53\x0d\xe4\x4c\x82\xd5\x2c\xbf\xf5\x9e\xd2\x68\x4d\x9e\x52\xa3\x3f\x4d\x1f\xe8\x33\x14\x6a\xe3\x96\xf8\x73\x2f\x39\x0a\x17\xf5\x0d\x22\x94\x6a\x03\x55\x93\x3b\x87\xa4\xa8\xee\x0e\xb1\x61\xdc\x42\x23\x2d\x17\x5e\x9f\xb6\xd1\x92\x72\x04\x3c\x88\xd2\x27\xb5\x5f\x82\xd5\xe2\x7d\x89\x67\x52\xa2\xbe\x6a\x03\x8d\x6f\xfd\x72\xa8\xb5\xb2\x98\x93\x41\x81\xad\x18\x97\x86\x2c\xe2\xf2\x00\xac\x3e\xa2\xaa\xeb\x9f\xda\x87\x7d\x8b\xd2\x4d\xc7\x31\xfc\x55\xa8\x8c\x09\x58\x13\xd2\x33\x41\xe9\x9c\x82\x52\xd1\xd1\x07\xda\x32\x96\xd9\xc6\x80\x5a\xba\x51\x2f\x39\xed\x5f\x33\x4d\x16\xc4\xaa\xb6\x90\xb6\x0d\x36\x1a\x33\xa8\xd7\x6d\xdb\x90\x5e\xa9\x72\x3f\x98\xef\xb5\x9e\xc2\xcf\xbf\xcc\x9f\xb4\xa2\xfc\x19\x97\x0e\x12\x84\x6f\x7f\x64\x5b\x32\x0b\xb9\x46\x66\xd1\x40\x2e\x94\x69\xb4\x97\xb0\xd0\xaa\x06\x92\xb2\xa3\xd4\x51\xa6\x89\xda\x71\xeb\x88\x8c\x4b\x66\xca\x49\xdb\x1f\xd4\xe8\xac\xd4\xcf\x75\xe3\x17\x84\xba\x31\x11\xe0\xe9\x74\x0e\x3c\xe9\xe8\x46\x02\xe5\xca\x96\x73\xe0\xcf\x9f\xf7\x8b\x2f\xf8\x12\xc6\xdd\x8a\x9f\xf9\x2f\x91\xbd\x8b\x88\x0b\xa4\x29\x0c\xb9\x39\x86\x2d\x1d\x53\x0b\x9e\xe3\x98\x5f\xc2\xd5\x64\xde\xcd\x66\x1a\xd9\x6d\xf7\xd6\xda\xd1\xff\xe7\xfe\xee\xe6\x87\x9a\x71\xca\x3f\xd0\x8d\xaf\xfd\x0d\x30\x58\x71\x63\xa1\xd1\x02\x5a\x1f\xf6\x26\xe8\x0d\xe2\xd6\x0d\xb5\x72\x82\xcb\xf6\xa1\xc5\x54\x77\x04\x4f\x26\x32\x28\x8b\xf1\x7f\xfc\xf8\xdd\xb7\x91\xb1\x9a\xcb\x15\x5f\x6e\xc7\xf7\x8d\x16\x33\x78\x3a\x0e\xfe\xa5\xd1\x22\x98\xfc\x3c\xfd\x25\x5a\x33\xd1\xe0\xa5\xb3\xf7\xcc\xfd\x3d\xe1\x72\x09\xed\xe3\x0c\x0e\x19\xee\x26\x93\xf9\xf9\x3e\xc9\xa0\xad\xa3\xd1\xa0\x1d\xd3\xc2\x1e\xf8\xc7\x3a\x62\x50\xa1\x2d\x95\x73\x5d\x8d\xb9\x92\x12\x73\x0b\x4d\xad\x64\xab\x12\x10\xca\x98\x3d\x10\xbb\x15\xe9\x29\x28\xda\xf5\xa9\x0b\xd6\xff\x8d\xd9\x8f\x2a\xbf\x45\x3b\x1e\x8f\x37\x5c\x16\x6a\x13\x09\xe5\xaf\xda\x88\x9c\x54\xe5\x4a\x40\x9a\xa6\xd0\x46\xd1\x60\x02\x5f\x43\xb0\x31\x14\x4f\x03\x98\xd1\x23\x3d\x4d\xe0\x39\x1c\x6f\x2f\x29\xde\x3f\x87\x20\x66\x35\x0f\x26\xde\x1d\x3a\xc5\x2b\x59\xa1\x31\x6c\x85\x43\x01\x5d\x65\xd4\x83\x8c\xce\x51\x99\x15\xa4\xe0\x0c\x54\x33\x6d\xd0\x2f\x89\xa8\x1a\xef\xd0\x46\x98\x75\xcb\xd2\x14\x64\x23\xc4\x1e\xa4\xde\x29\xe6\x1d\xfc\x0e\x96\x47\x3e\xd6\x7c\x95\xa6\x40\xa5\x29\xa9\xb8\xd8\xef\x24\xe3\xfb\x22\x7a\x12\x51\x5c\xd8\xef\x98\xcc\x87\x68\x3e\xa0\x86\xc5\xef\x91\xc3\xe2\x98\x1e\x16\x0f\x10\x74\x3d\x8b\xc7\xe8\xf9\x1e\xc7\x80\x9c\x1b\x78\x80\x9a\x6c\xaa\x0c\xf5\x63\xe4\x7c\xcf\xa2\x25\xe7\x54\xfd\x4e\xda\xc1\xde\x4b\xb8\x7a\x35\x79\x80\x3a\x6a\xad\x1e\x24\x2e\x95\xdd\x8e\xef\x05\xdb\x52\xce\x04\x23\xab\xea\xb7\xae\xc5\x30\xba\x74\x11\x77\x06\x3d\x85\x4b\xd7\x3c\x9e\xc1\xc8\xbd\xd1\x3c\xaf\xd0\xed\x7a\x39\x9d\x4e\x2f\xa1\xfb\xec\xf2\x27\x46\x4e\xa8\x1b\xdc\x3d\x20\x8f\x69\xf2\x9c\xe2\xfe\xe7\x48\xd4\xd2\xe8\x65\x6a\xdf\x3f\x43\xaa\x3e\x36\x1c\x88\x05\x7f\xf8\x03\x9c\xcc\x1e\xc2\x38\x8e\xe1\xbf\x18\x95\xe1\x42\xb8\xee\x81\x6b\x1a\xf4\xeb\x2b\x6e\x8c\x2b\xc6\x0d\x14\x4a\x62\xbb\xe7\xd3\xae\xfd\x13\x19\xdb\x65\xb0\x80\xe9\xb1\x80\x74\x1d\x0e\xc2\xc2\x99\x68\x31\xa0\x7b\x18\x08\x2e\x76\x43\x7e\x07\x3b\x79\x85\xf0\x55\x0a\x41\x30\xdc\x7c\xb2\x82\x16\xf4\xc4\x2e\x0c\xda\xf7\xde\x16\xe3\x36\x3a\x9e\x8b\x5d\x93\x4b\xb8\x99\x4e\xa7\x93\x13\x21\x76\x7b\xf5\xbe\xa9\x29\x6d\x02\x26\xb7\xee\x4a\xec\x75\xeb\x12\x47\x4a\x81\xe8\x4a\x13\x90\x2b\x21\x7c\xce\xd2\x6e\x25\x05\xb7\xcd\x93\x14\xc2\xab\xf9\x99\x28\x3a\xd0\xe4\xe0\x68\xc7\xe6\x39\xa3\xfb\x63\x13\x1d\xea\xec\x68\x71\x78\x75\x60\x94\x03\x7b\x9d\x37\xcc\x45\x2f\x37\xdf\x6b\xf4\xc8\x5c\x7b\x7b\x1d\xeb\x6c\x20\xbf\xa7\xf3\xfc\xea\x23\x8f\xd1\x4f\xd7\x8d\x29\xc7\x47\x82\x4e\xe6\xa7\xb6\x79\x67\x51\x53\x96\xac\x28\x64\x91\x2d\xa8\x14\xd0\x78\x62\x12\x97\xaa\x6b\x0c\x35\xca\x02\x75\x97\x52\xf8\xcc\x9e\x12\xc0\x03\x93\xf9\xaa\x72\x08\xa7\x4f\x74\x18\x97\x92\x29\x89\x00\x00\x47\x4e\xe0\x80\x7a\x80\x54\x5a\x8c\x82\xd5\x06\x0b\x48\xc1\x7f\x05\x1f\x4f\xa2\x46\xf2\xbb\xf1\x24\x6c\xdf\x8f\x69\x74\xf3\xf3\xbe\x4c\xec\xc4\x7e\x9e\x42\x90\x58\x0d\xbc\x48\x47\x01\x3c\x3f\xe7\x82\x14\x75\x47\x8b\xbd\x04\xc3\xad\x00\x89\x2d\x16\xae\x0f\xea\xeb\xb5\xbf\x07\x19\xcb\x6f\x57\xae\x10\x9a\x51\xaa\x35\x3e\x21\xcb\xd6\xcc\x32\xed\xa8\x4e\xe6\xb0\x5f\xde\x16\x8a\x39\x19\x67\x0e\xbe\x22\x75\xed\x56\xe8\x3f\x51\xb8\xb7\x4c\xe9\x02\x75\xa8\x59\xc1\x1b\x33\x83\x17\xf5\xdd\xfc\xef\xdd\x27\x1c\xd7\x14\x7e\x54\xd4\x5a\xe3\xe2\x44\xa2\xb6\xcb\xf8\x1c\x82\x24\xa6\x05\xbf\x47\xa6\x3f\xec\xf0\xeb\x3b\x9c\x69\x7d\x43\xff\x6d\xbc\x1d\xaf\x78\x51\x08\x24\x81\xf7\xe4\xc9\x19\xc9\xfe\x43\x97\x3a\x64\x09\x6d\xcf\x7b\xbf\x67\x07\x28\x0c\x3e\xb2\xa1\x6f\x9f\x8f\x08\x00\x21\x1d\x99\x3b\x9d\xb7\xc5\xb6\x1b\xd6\x23\xa7\x8b\xf6\xb7\x14\x45\xa3\x5d\xae\x35\x0e\x5b\x80\x5d\xc2\xc8\x50\xee\x57\x98\xd1\x24\x2a\x9b\x8a\x49\xfe\x1b\x8e\x29\x2e\x4d\xbc\xae\x5c\x3f\x3e\x38\xbd\x92\x4f\x84\xd9\x37\xca\x47\x5d\x8c\x1b\xb5\x4a\x1c\x75\xd6\x7d\xb1\xaf\xed\x67\x30\x9d\x8f\x3e\x51\x43\xe7\xb9\x84\x19\xd3\x30\x7c\x09\xbb\xe0\x0b\x5a\x11\xf7\x6e\x2e\x63\x7a\xe4\x3b\x19\x2e\x3f\x97\x6a\x93\x8e\x6e\xa6\xbd\x90\xde\xd0\xce\xce\xa3\x16\x6b\x27\xc6\x20\x29\x3b\xd7\x5c\xc0\xcd\xf4\x4b\x48\xeb\xbb\x21\x47\x27\xb0\x9a\xd7\x58\x00\xcb\x2d\x5f\xe3\xff\xc3\x41\xbe\x80\x92\x3f\x59\x44\xc2\x61\xa7\x3c\x07\xd3\x03\x79\x69\xb6\xd7\xed\xbf\x92\xbf\x41\xec\x34\xfc\x1c\x82\xb3\x07\x79\x10\x89\x47\x0b\x8f\x5c\xfb\x61\xbf\x77\x1f\x98\x82\xe3\x98\x42\xd9\x6e\xff\x71\x74\x12\x95\xb6\x12\xe3\x20\xb1\xee\x57\x32\x24\x73\x4f\xc1\x11\xf0\xc3\x87\x29\xdd\xee\xb0\x90\xa1\xfa\x1d\x8f\xea\x2c\x18\x24\x27\x7d\x2d\xd6\x65\x22\xb0\xdb\xff\x98\x28\x8e\xe1\x47\xcb\xb4\x05\x06\x3f\xbd\x83\xa6\x2e\x98\xf5\x9f\x72\x28\x3e\xfa\x4f\x25\xdd\xaf\x8d\x32\xa6\x0d\x2c\x95\xde\x30\x5d\xb4\xfd\x19\x5b\xe2\xd6\x7d\xca\xe9\x52\x3f\x83\xf6\x1d\xdd\x62\x6b\x26\xc6\x27\x75\xdf\xd3\xf1\x28\x1a\x9a\x7c\x34\x89\x90\xe5\xe5\xe9\x42\x17\xb1\x7a\xbe\x29\x7c\xeb\x4a\x80\xf1\xd3\xb1\x2d\xb9\x99\x44\xcc\x5a\x3d\x1e\x1d\x80\x61\x34\x21\xbb\x5e\x0d\x4a\xb2\x7e\x7b\x72\xe0\x56\x8f\xd1\xd8\x27\xd3\x7d\x22\xd0\x2d\xcf\x8d\x19\x7b\x5c\x8d\x2e\x07\xb4\x0f\x61\x35\x7a\x36\xea\x0d\xb5\x77\xef\xfd\x39\xd2\xb3\x92\x1c\x90\x1e\x91\x97\x8d\x4e\xd8\xb3\xa2\x78\x4b\xfe\x33\x0e\xce\x78\xfa\x31\x3a\x26\xbd\xb2\xfd\x7d\xfd\xa8\x96\xfd\xcf\x32\x1e\x50\x31\x2f\x46\x93\xc8\x34\x99\xef\x4d\x8c\x5f\xf6\x05\x58\xb7\xcc\x81\xf7\x38\x14\x9c\x24\x14\xc4\xe2\x30\xa9\x08\x8f\x92\x90\x47\xa2\x46\xcb\xd2\x9f\x6a\x77\x49\x0a\x9f\x4e\xfa\xd6\xd6\x37\x86\x92\x2b\xdf\xfa\xdf\x60\x66\x5c\x27\x01\x5a\xbc\xbb\x6e\x8e\xef\xda\xbc\xf9\xfe\xdd\xa0\x73\xd3\x7b\xc4\xd8\x51\xef\x7f\x08\x78\xae\x4f\x72\xf6\x97\x87\x9b\xcd\x26\x5a\x29\xb5\x12\xfe\x37\x87\x7d\x23\x25\x66\x35\x8f\x3e\x98\x00\x98\xd9\xca\x1c\x0a\x5c\xa2\x5e\x0c\xc8\xb7\xdd\x95\x24\xf6\xbf\x89\x4b\x62\xff\xb3\xdf\xff\x0b\x00\x00\xff\xff\xc4\x02\xc2\x78\x07\x2c\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0x4d, 0xa3, 0x4d, 0xab, 0x16, 0x8c, 0x6c, 0x49, 0xd8, 0x78, 0x28, 0x26, 0x1a, 0x52, 0x53, 0xdc, 0x13, 0x8e, 0x81, 0x3, 0x5, 0x35, 0x99, 0xa, 0x8, 0x7c, 0x87, 0x2a, 0x40, 0x3f, 0x40}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
